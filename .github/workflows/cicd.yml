name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  K8S_NAMESPACE: meeting-room-system
  HELM_VERSION: v3.10.0
  KUBECTL_VERSION: v1.26.0

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          cache: 'pip'

      - name: Install dependencies for all services
        run: |
          pip install -r user-service/requirements.txt
          pip install -r room-service/requirements.txt
          pip install -r reservation-service/requirements.txt
          pip install pytest pytest-cov

      - name: Create test databases
        run: |
          sudo apt-get install -y postgresql-client
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE user_db_test;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE room_db_test;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE reservation_db_test;"

      - name: Run user-service tests
        working-directory: ./user-service
        run: |
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/user_db_test JWT_SECRET_KEY=test-key pytest tests/ -v

      - name: Run room-service tests
        working-directory: ./room-service
        run: |
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/room_db_test JWT_SECRET_KEY=test-key pytest tests/ -v

      - name: Run reservation-service tests
        working-directory: ./reservation-service
        run: |
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/reservation_db_test JWT_SECRET_KEY=test-key pytest tests/ -v

  build:
    name: Build and Push Images
    needs: test
    runs-on: ubuntu-latest
    outputs:
      sha_tag: ${{ steps.set-tags.outputs.sha_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set Docker tags
        id: set-tags
        run: |
          SHA_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          DATE_TAG=$(date +%Y%m%d-%H%M)
          echo "sha_tag=${SHA_TAG}" >> $GITHUB_OUTPUT
          echo "date_tag=${DATE_TAG}" >> $GITHUB_OUTPUT

      - name: Build and push user-service
        uses: docker/build-push-action@v4
        with:
          context: ./user-service
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/user-service:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/user-service:${{ steps.set-tags.outputs.sha_tag }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/user-service:${{ steps.set-tags.outputs.date_tag }}

      - name: Build and push room-service
        uses: docker/build-push-action@v4
        with:
          context: ./room-service
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/room-service:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/room-service:${{ steps.set-tags.outputs.sha_tag }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/room-service:${{ steps.set-tags.outputs.date_tag }}

      - name: Build and push reservation-service
        uses: docker/build-push-action@v4
        with:
          context: ./reservation-service
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/reservation-service:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/reservation-service:${{ steps.set-tags.outputs.sha_tag }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/reservation-service:${{ steps.set-tags.outputs.date_tag }}

  deploy:
    name: Deploy to Kubernetes
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Configure Kubernetes credentials
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Create namespace if not exists
        run: |
          kubectl get namespace ${{ env.K8S_NAMESPACE }} || kubectl create namespace ${{ env.K8S_NAMESPACE }}

      - name: Deploy with Helm
        run: |
          helm upgrade --install meeting-room-system ./helm \
            --namespace ${{ env.K8S_NAMESPACE }} \
            --set imageTag=${{ needs.build.outputs.sha_tag }} \
            --set jwtSecret="${{ secrets.JWT_SECRET_KEY }}" \
            --set googleClientId="${{ secrets.GOOGLE_CLIENT_ID }}" \
            --set googleClientSecret="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            --set environment="${{ github.event.inputs.environment || 'development' }}"

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/user-service -n ${{ env.K8S_NAMESPACE }}
          kubectl rollout status deployment/room-service -n ${{ env.K8S_NAMESPACE }}
          kubectl rollout status deployment/reservation-service -n ${{ env.K8S_NAMESPACE }}