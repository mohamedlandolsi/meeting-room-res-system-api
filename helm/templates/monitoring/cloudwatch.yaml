{{- if and .Values.monitoring.enabled .Values.monitoring.cloudwatch.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluentd
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fluentd-{{ .Release.Namespace }}
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - namespaces
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fluentd-{{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: fluentd-{{ .Release.Namespace }}
subjects:
- kind: ServiceAccount
  name: fluentd
  namespace: {{ .Release.Namespace }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-config
  namespace: {{ .Release.Namespace }}
data:
  fluent.conf: |
    <source>
      @type tail
      path /var/log/containers/*.log
      pos_file /var/log/fluentd-containers.log.pos
      tag kubernetes.*
      read_from_head true
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <filter kubernetes.**>
      @type kubernetes_metadata
      kubernetes_url https://kubernetes.default.svc
      bearer_token_file /var/run/secrets/kubernetes.io/serviceaccount/token
      ca_file /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      skip_labels false
      skip_container_metadata false
      skip_namespace_metadata false
    </filter>

    <filter kubernetes.**>
      @type record_transformer
      <record>
        app ${record.dig("kubernetes", "labels", "app") || record.dig("kubernetes", "container_name")}
        hostname ${record.dig("kubernetes", "host")}
        namespace ${record.dig("kubernetes", "namespace_name")}
        pod_name ${record.dig("kubernetes", "pod_name")}
        log ${record["log"]}
      </record>
    </filter>

    <match kubernetes.**>
      @type cloudwatch_logs
      log_group_name {{ .Values.monitoring.cloudwatch.logGroupName }}
      log_stream_name_key stream_name
      auto_create_stream true
      use_tag_as_stream false
      remove_log_group_name_key true
      remove_log_stream_name_key true
      <buffer>
        flush_interval 5s
        chunk_limit_size 2m
        queued_chunks_limit_size 32
        retry_forever true
      </buffer>
      <web_identity_credentials>
        role_arn arn:aws:iam::ACCOUNT_ID:role/EKS-FluentD-Role
        role_session_name fluentd-cloudwatch
      </web_identity_credentials>
    </match>

    <label @FLUENT_LOG>
      <match **>
        @type null
      </match>
    </label>
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd-cloudwatch
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: fluentd-cloudwatch
  template:
    metadata:
      labels:
        app: fluentd-cloudwatch
    spec:
      serviceAccountName: fluentd
      terminationGracePeriodSeconds: 30
      containers:
      - name: fluentd
        image: fluent/fluentd-kubernetes-daemonset:v1.14-debian-cloudwatch-1
        env:
        - name: AWS_REGION
          value: {{ .Values.monitoring.cloudwatch.region }}
        - name: LOG_GROUP_NAME
          value: {{ .Values.monitoring.cloudwatch.logGroupName }}
        - name: LOG_STREAM_PREFIX
          value: {{ .Values.monitoring.cloudwatch.logStreamPrefix }}
        - name: FLUENT_CONTAINER_TAIL_PARSER_TYPE
          value: /^(?<time>.+) (?<stream>stdout|stderr)( (?<logtag>.))? (?<log>.*)$/
        - name: FLUENT_CONTAINER_TAIL_EXCLUDE_PATH
          value: /var/log/containers/fluentd-cloudwatch*
        resources:
{{ toYaml .Values.monitoring.cloudwatch.fluentd.resources | indent 10 }}
        volumeMounts:
        - name: config-volume
          mountPath: /fluentd/etc/
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
      volumes:
      - name: config-volume
        configMap:
          name: fluentd-config
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
{{- end }}