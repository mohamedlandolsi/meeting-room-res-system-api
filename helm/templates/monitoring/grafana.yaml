{{- if and .Values.monitoring.enabled .Values.monitoring.grafana.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-data
  namespace: {{ .Release.Namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.monitoring.grafana.persistence.storageSize }}
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  admin-password: {{ .Values.monitoring.grafana.adminPassword | b64enc }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: {{ .Release.Namespace }}
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Loki
      type: loki
      url: http://loki:3100
      access: proxy
      isDefault: true
    {{- if .Values.monitoring.cloudwatch.enabled }}
    - name: CloudWatch
      type: cloudwatch
      jsonData:
        authType: default
        defaultRegion: {{ .Values.monitoring.cloudwatch.region }}
      editable: true
    {{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: {{ .Release.Namespace }}
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'Kubernetes'
      orgId: 1
      folder: 'Kubernetes'
      type: file
      disableDeletion: false
      editable: true
      options:
        path: /var/lib/grafana/dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-kubernetes
  namespace: {{ .Release.Namespace }}
data:
  kubernetes-logs.json: |
    {
      "annotations": {
        "list": []
      },
      "editable": true,
      "graphTooltip": 0,
      "hideControls": false,
      "id": null,
      "links": [],
      "panels": [
        {
          "datasource": "Loki",
          "gridPos": {
            "h": 8,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 1,
          "options": {
            "dedupStrategy": "none",
            "enableLogDetails": true,
            "prettifyLogMessage": false,
            "showCommonLabels": false,
            "showLabels": false,
            "showTime": true,
            "sortOrder": "Descending",
            "wrapLogMessage": false
          },
          "targets": [
            {
              "expr": "{namespace=\"{{ .Release.Namespace }}\"}",
              "refId": "A"
            }
          ],
          "title": "Kubernetes Logs",
          "type": "logs"
        }
      ],
      "refresh": "10s",
      "schemaVersion": 16,
      "style": "dark",
      "tags": [
        "kubernetes",
        "logs"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-1h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "browser",
      "title": "Kubernetes Logs",
      "uid": "kubernetes-logs",
      "version": 0
    }
  service-logs.json: |
    {
      "annotations": {
        "list": []
      },
      "editable": true,
      "graphTooltip": 0,
      "hideControls": false,
      "id": null,
      "links": [],
      "panels": [
        {
          "datasource": "Loki",
          "gridPos": {
            "h": 8,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 1,
          "options": {
            "dedupStrategy": "none",
            "enableLogDetails": true,
            "prettifyLogMessage": false,
            "showCommonLabels": false,
            "showLabels": false,
            "showTime": true,
            "sortOrder": "Descending",
            "wrapLogMessage": false
          },
          "targets": [
            {
              "expr": "{namespace=\"{{ .Release.Namespace }}\", app=~\"user-service|room-service|reservation-service\"}",
              "refId": "A"
            }
          ],
          "title": "Service Logs",
          "type": "logs"
        }
      ],
      "refresh": "10s",
      "schemaVersion": 16,
      "style": "dark",
      "tags": [
        "kubernetes",
        "logs",
        "services"
      ],
      "templating": {
        "list": [
          {
            "allValue": null,
            "current": {
              "selected": true,
              "text": "All",
              "value": "$__all"
            },
            "datasource": "Loki",
            "definition": "label_values(app)",
            "hide": 0,
            "includeAll": true,
            "label": "Service",
            "multi": false,
            "name": "service",
            "options": [],
            "query": "label_values(app)",
            "refresh": 1,
            "regex": "^(user-service|room-service|reservation-service)$",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          }
        ]
      },
      "time": {
        "from": "now-1h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "browser",
      "title": "Service Logs",
      "uid": "service-logs",
      "version": 0
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-alerting
  namespace: {{ .Release.Namespace }}
data:
  alerting.yaml: |
    apiVersion: 1
    contactPoints:
    - name: email-alerts
      receivers:
      - uid: email-default
        type: email
        settings:
          addresses: {{ .Values.adminEmails }}
    
    policies:
    - orgId: 1
      receiver: email-alerts
      group_by: ['alertname']
      matchers:
      - alertname=~".*"
  
  alert-rules.yaml: |
    groups:
    - name: service-alerts
      rules:
      - name: HighErrorRate
        expr: |
          sum(rate({namespace="{{ .Release.Namespace }}", app=~"user-service|room-service|reservation-service"} |~ "ERROR" [5m])) by (app) > 0.1
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: High error rate in {{ "{{" }} $labels.app {{ "}}" }}
          description: The error rate for {{ "{{" }} $labels.app {{ "}}" }} is {{ "{{" }} $value {{ "}}" }} errors per second for over 5 minutes
      
      - name: ServiceUnavailable
        expr: |
          absent({namespace="{{ .Release.Namespace }}", app=~"user-service|room-service|reservation-service"}) == 1
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: Service unavailable
          description: No logs received from the service in the last minute, it may be down
      
      - name: DatabaseErrors
        expr: |
          {namespace="{{ .Release.Namespace }}", app=~"user-service|room-service|reservation-service"} |~ "(?i)database error|sql error|connection refused|postgresql|timeout"
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: Database errors detected in {{ "{{" }} $labels.app {{ "}}" }}
          description: Database related errors detected in service logs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: {{ .Release.Namespace }}
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:9.5.5
        ports:
        - containerPort: 3000
          name: http-grafana
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-admin
              key: admin-password
        - name: GF_PATHS_PROVISIONING
          value: /etc/grafana/provisioning
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          value: "Viewer"
        {{- if .Values.monitoring.cloudwatch.enabled }}
        - name: AWS_REGION
          value: {{ .Values.monitoring.cloudwatch.region }}
        {{- end }}
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards-provider
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
        {{- if .Values.monitoring.grafana.alerting.enabled }}
        - name: grafana-alerting
          mountPath: /etc/grafana/provisioning/alerting
        {{- end }}
        resources:
{{ toYaml .Values.monitoring.grafana.resources | indent 10 }}
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-data
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-provider
        configMap:
          name: grafana-dashboards
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboard-kubernetes
      {{- if .Values.monitoring.grafana.alerting.enabled }}
      - name: grafana-alerting
        configMap:
          name: grafana-alerting
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: {{ .Release.Namespace }}
spec:
  type: {{ .Values.monitoring.grafana.service.type }}
  ports:
  - port: {{ .Values.monitoring.grafana.service.port }}
    targetPort: http-grafana
  selector:
    app: grafana
{{- if .Values.monitoring.grafana.ingress.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana
  namespace: {{ .Release.Namespace }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: grafana.{{ .Release.Namespace }}.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: {{ .Values.monitoring.grafana.service.port }}
{{- end }}
{{- end }}